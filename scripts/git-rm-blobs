#!/bin/sh
#
# Copyright (c) 2009 Ross Patterson

LONG_USAGE='Remove previously backed up, unpacked blobs.  Leave \
commits, tress and all other objects present in the local repository.

WARNING: This script destroys repository objects

This script removes blobs from your local object store.  It is \
intended to be used after the repository has *already* been backed \
up to conserve space locally.  If you run this before backing up \
youre repository you will permanently lose data.'
SUBDIRECTORY_OK=Yes
. $(git --exec-path)/git-sh-setup
require_work_tree

## Unpack prevous packs to make one pack, a substitute for repacking
## since the removed blobs breaks "git repack"
for pack in $GIT_OBJECT_DIRECTORY/pack/*.pack
do
    if [[ -f $pack ]]
    then
        # we need the -r option since the blobs aren't referencable
        # and the pack is technically corrupt
        mv $pack $pack.tmp
        echo >&2 "Unpacking objects..."
        git unpack-objects <$pack.tmp || die "Unpacking failed"
        rm -f $pack.tmp ${pack%.pack}.idx
    fi
done

## Remove the blobs from the local store
## Two implementations here.  One uses packs and leaves the pack index
## around.  The other simple moves the blobs directly and then deletes
## them after they're pruned from the original store.  Since we throw
## the pack away, the pack approach involes some wasted time.  But if
## git can make some use of the pack index without the pack, then it
## may be worth it.  Otherwise just the the blob moving approach.
## I did a quick "time test" and it seems like the move approach is
## indeed faster.

## Use a pack to move objects to the alternate store
# git list-unpacked blob | git pack-objects blobs
## Move the pack to the alternate object store
# pack=$(ls -d blobs-????????????????????????????????????????.pack)
# hash=${pack:6:40}
# mkdir -p $GIT_DIR/archive/pack/
# mv $pack blobs-$hash.idx $GIT_DIR/archive/pack/

## Manually move objects to the alternate store
echo >&2 "Moving blobs..."
blobs=$( git list-unpacked blob )
for blob in $blobs
do
    mkdir -p $GIT_DIR/archive/${blob:0:2}
    mv $GIT_OBJECT_DIRECTORY/${blob:0:2}/${blob:2:38} $GIT_DIR/archive/${blob:0:2}/
done

## Manually pack the other objects since removing the blobs breaks
## "git repack"
echo >&2 "Packing trees, commits, and tags..."
git list-unpacked tree commit tag | git pack-objects pack &&
mv pack-*.pack pack-*.idx $GIT_OBJECT_DIRECTORY/pack/

## remove the objects form the local store
## Since we next remove the alternate that would make the objects
## prunable, we have to force pruning now.  The auto expire will leave
## the objects behind.
git prune || ( die "Pruning failed" )

## Remove the pack but leave the index
# rm -f $GIT_DIR/archive/pack/$pack

## Remove the successfully archived objects from the alternate store
## At this point they're no longer available to the repo but safely
## backed up in the bundle
for blob in $blobs
do
    rm -f $GIT_DIR/archive/${blob:0:2}/${blob:2:38}
    rmdir --ignore-fail-on-non-empty $GIT_DIR/archive/${blob:0:2}
done
